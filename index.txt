<!doctype html>
<html lang="en">
<head>
<meta charset="utf-8" />
<meta name="viewport" content="width=device-width,initial-scale=1" />
<title>System Access</title>
<style>
  :root{
    --bg:#000;
    --green:#00ff00;
    --dim: rgba(0,255,0,0.08);
    --font: "Lucida Console", Monaco, monospace;
  }
  html,body{height:100%;margin:0;background:var(--bg);color:var(--green);font-family:var(--font);overflow:hidden}
  /* matrix canvas */
  canvas#matrix{position:fixed;inset:0;z-index:0;display:block}
  /* terminal container */
  .term {
    position:relative;
    z-index:2;
    height:100%;
    display:flex;
    align-items:flex-start;
    justify-content:center;
    padding:30px;
    box-sizing:border-box;
    pointer-events:none;
  }
  .window {
    width:min(980px,94%);
    max-height:86%;
    background:linear-gradient(180deg, rgba(0,0,0,0.15) 0, rgba(0,0,0,0.6) 100%);
    border:1px solid rgba(0,255,0,0.12);
    padding:18px;
    box-sizing:border-box;
    box-shadow:0 10px 40px rgba(0,0,0,0.6);
    overflow:auto;
    pointer-events:auto;
  }
  .title {
    font-size:14px;
    margin-bottom:8px;
    color:var(--dim);
  }
  .lines {
    white-space:pre-wrap;
    line-height:1.45;
    font-size:16px;
    color:var(--green);
    min-height:240px;
  }
  .cursor { display:inline-block; width:10px; background:var(--green); margin-left:3px; animation:blink 0.8s steps(1) infinite; height:18px; vertical-align:middle; }
  @keyframes blink{50%{opacity:0}}
  /* small footer */
  .footer { color:var(--dim); font-size:13px; margin-top:12px; }
  /* prevent selection */
  *{user-select:none;-webkit-user-select:none;-ms-user-select:none;}
</style>
</head>
<body>
<canvas id="matrix"></canvas>

<div class="term">
  <div class="window" role="region" aria-label="terminal">
    <div class="title">SYSTEM STATUS â€¢ secure-shell</div>
    <div id="lines" class="lines"></div>
    <div class="footer">If you see a camera prompt: it's a prank â€” no access requested.</div>
  </div>
</div>

<script>
/* ---------- CONFIG ---------- */
const revealDelayMs = 7000; // time (ms) before showing the final "just kidding" reveal
const typeSpeed = 24;       // milliseconds per character
/* ---------------------------- */

/* MATRIX RAIN */
const canvas = document.getElementById('matrix');
const ctx = canvas.getContext('2d');
let W = canvas.width = innerWidth;
let H = canvas.height = innerHeight;
window.addEventListener('resize', ()=>{ W=canvas.width=innerWidth; H=canvas.height=innerHeight; initCols(); });

const fontSize = 14;
let cols, drops;
function initCols(){
  cols = Math.floor(W / fontSize);
  drops = new Array(cols).fill(1).map(()=>Math.floor(Math.random()*H/fontSize));
}
initCols();

function draw(){
  ctx.fillStyle = "rgba(0,0,0,0.08)";
  ctx.fillRect(0,0,W,H);
  ctx.fillStyle = "#00ff00";
  ctx.font = fontSize + "px monospace";
  for(let i=0;i<cols;i++){
    const text = String.fromCharCode(33 + Math.random()*94);
    ctx.fillText(text, i*fontSize, drops[i]*fontSize);
    if(drops[i]*fontSize > H && Math.random() > 0.975) drops[i]=0;
    drops[i]++;
  }
  requestAnimationFrame(draw);
}
requestAnimationFrame(draw);

/* TYPING TERMINAL */
const linesEl = document.getElementById('lines');
const typingLines = [
  "Initializing secure console...",
  "Loading kernel modules...",
  "Establishing outbound channels...",
  "Bypassing firewall: SUCCESS",
  "Accessing user database...",
  "Downloading secret data packets (547MB)...",
  "Uploading archive to remote cloud storage...",
  "Transfer complete. checksum OK.",
  "Encrypting local logs...",
  "Error: unauthorized observer detected...",
];

let charQueue = []; // flattened characters with timings
for (let L of typingLines) {
  charQueue.push({text:L + "\n", delay:0});
}
let idxQueue = 0;

function sleep(ms){ return new Promise(res=>setTimeout(res, ms)); }

async function typeAll(){
  for (let i=0;i<charQueue.length;i++){
    const entry = charQueue[i];
    await typeString(entry.text);
    // small pause between lines
    await sleep(300 + Math.random()*300);
  }
  // after main lines, wait and then reveal
  await sleep(Math.max(200, revealDelayMs - 2000));
  await typeString("\nJust kidding ðŸ˜‚ â€” you\u2019re safe! ðŸŽ‰\n");
  // final friendly footer
  await sleep(200);
  await typeString("â€” Congrats bro. Share the QR and enjoy the reactions.\n");
}

async function typeString(str){
  for(let ch of str){
    linesEl.innerHTML += (ch === '\n' ? '\n' : ch);
    // keep scroll at bottom
    linesEl.parentElement.scrollTop = linesEl.parentElement.scrollHeight;
    await sleep(typeSpeed + Math.floor(Math.random()*12));
  }
}

/* prevent accidental long fullscreen requests; we just make it full viewport */
document.addEventListener('DOMContentLoaded', ()=>{
  // slight entrance effect: pre-populate a little, then start typing
  linesEl.innerHTML = "Booting...\n";
  setTimeout(()=>{ typeAll().catch(()=>{}); }, 500);
});
</script>
</body>
</html>
